- name: Set python interpreter if using Azure DevOps
  set_fact:
    ansible_python_interpreter: "{{ adoAnsiblePythonInterpreter }}"
  when: adoAnsiblePythonInterpreter is defined

- name: Set playbook facts
  set_fact:
    time: "{{ ansible_date_time.iso8601_basic_short }}"
    timeExpiry: "{{ '%Y-%m-%d' | strftime( ( ansible_date_time.epoch | int ) + ( 86400 * 3 )  ) }}"
    resourceGroupName: "rg-{{ environmentShort }}-{{ locationShort }}-{{ rgCommonName }}"
    storageAccountName: "strg{{ environmentShort }}{{ locationShort }}{{ rgCommonName }}"
    storageContainerName: "ansible"

- name: Create Azure resource group ({{ resourceGroupName }})
  azure_rm_resourcegroup:
     name: "{{ resourceGroupName }}"
     location: "{{ location }}"

- name: Create Azure storage account (strg{{ environmentShort }}{{ locationShort }}{{ rgCommonName }})
  azure_rm_storageaccount:
    resource_group: "{{ resourceGroupName }}"
    name: "{{ storageAccountName }}"
    type: Standard_RAGRS
  register: storageAccount

- name: Find files in ./roles/azure-deploy-coreos/files
  find:
    paths: ./roles/azure-deploy-coreos/files
    recurse: yes
    file_type: file
  register: files

- name: Create container ({{ storageContainerName }}) and upload files from ./roles/azure-deploy-coreos/files
  azure_rm_storageblob:
    resource_group: "{{ resourceGroupName }}"
    storage_account_name: "{{ storageAccountName }}"
    container: "{{ storageContainerName }}"
    blob: "{{ time }}/{{ item.path | regex_replace('^roles/azure-deploy-coreos/files/(.*)', '\\1') }}"
    src: "{{ item.path }}"
  with_items: "{{ files.files }}"

- name: Get Azure storage account keys
  azure_rm_resource:
    resource_group: "{{ resourceGroupName }}"
    provider: storage
    resource_type: storageAccounts
    resource_name: "{{ storageAccountName }}/ListAccountSas"
    api_version: "2018-03-01-preview"
    method: POST
    body:
      signedServices: "b"
      signedResourceTypes: "o"
      signedPermission: "r"
      signedProtocol: "https"
      signedExpiry: "{{ timeExpiry }}"
  register: storageAccountSas

- name: Set Azure storage account facts
  set_fact:
    storageUri: "{{ storageAccount.state.primary_endpoints.blob }}"
    storageSasToken: "{{ storageAccountSas.response.accountSasToken  }}"

- name: Set ARM Template deployment name
  set_fact:
    deploymentName: "coreos-nodes-main_{{ time }}"

- name: Create azure deploy ({{ deploymentName }})
  azure_rm_deployment:
    state: present
    resource_group_name: "{{ resourceGroupName }}"
    location: "{{ location }}"
    deployment_name: "{{ deploymentName }}"
    template_link: "{{ storageUri }}{{ storageContainerName }}/{{ time }}/armtemplates/coreos-nodes/main.json?{{ storageSasToken }}"
    parameters:
      containerUri:
        value: "{{ storageUri }}{{ storageContainerName }}"
      containerSasToken:
        value: "?{{ storageSasToken }}"
      time:
        value: "{{ time }}"
      commonName:
        value: "{{ nodeName }}"
      vmCount:
        value: "{{ nodeCount }}"
      locationShort:
        value: "{{ locationShort }}"
      environmentShort:
        value: "{{ environmentShort }}"
      virtualMachineSize:
        value: "{{ vmSize }}"
      adminUsername:
        value: "{{ sshUsername }}"
      virtualNetworkName:
        value: "{{ vnetName }}"
      virtualNetworkRgName:
        value: "{{ vnetRgName }}"
      diskSizeGB:
        value: "{{ osDiskSize }}"
      adminPublicKey:
        value: "{{ sshPublicKey }}"
      subnetName:
        value: "{{ subnetName }}"
  register: mainDeployment

- name: Create azure deploy ({{ registryStorageAccountCommonName }})
  azure_rm_deployment:
    state: present
    resource_group_name: "{{ resourceGroupName }}"
    location: "{{ location }}"
    deployment_name: "{{ registryStorageAccountCommonName }}_{{ time }}"
    template_link: "{{ storageUri }}{{ storageContainerName }}/{{ time }}/armtemplates/registryStorage/registryStorage.json?{{ storageSasToken }}"
    parameters:
      commonName:
        value: "{{ registryStorageAccountCommonName }}"
      locationShort:
        value: "{{ locationShort }}"
      environmentShort:
        value: "{{ environmentShort }}"
      virtualNetworkName:
        value: "{{ vnetName }}"
      virtualNetworkRG:
        value: "{{ vnetRgName }}"
      subnetName:
        value: "{{ subnetName }}"
  register: registryStorage

- name: Set facts for container storage
  set_fact:
    azureStorage:
      accountName: "{{ registryStorage.deployment.outputs.storageAccountName.value }}"
      accountKey: "{{ registryStorage.deployment.outputs.storageAccountKey.value }}"

- name: Get Azure node deployment outputs
  azure_rm_resource:
    resource_group: "{{ resourceGroupName }}"
    provider: Resources
    resource_type: deployments
    resource_name: "{{ item.name }}"
    api_version: "2017-05-10"
    method: GET
  with_items: "{{ mainDeployment.deployment.outputs.linkedDeploymentNames.value.linkedDeploymentNamesLoop }}"
  register: nodeDeployments

- name: Set facts for deployed VMs
  set_fact:
    armNodeList: "{{ nodeDeployments | json_query('results[*].response.properties.outputs') | sort(attribute='vmName.value') | list }}"

- name: Add inventory hosts
  add_host:
    hostname: "{{ item.vmName.value }}"
    ansible_host: "{{ item.privateIP.value }}"
    ansible_ip: "{{ item.privateIP.value }}"
    ansible_user: "{{ item.adminUsername.value }}"
    groups: "registry-{{ environmentShort }}"
  loop: "{{ armNodeList }}"